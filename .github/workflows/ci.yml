name: CI

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:

        include:
          # Linux
          - name: linux-gcc-ubsan-ootree
            os: ubuntu-latest
            # Undefined Behavior Sanitizer (cmake -DCMAKE_BUILD_TYPE=Ubsan)
            build-type: Ubsan
            build-dir: .build
            cxx-flags: '-O2'
            skeleton: ${{ false }}

          - name: linux-gcc-asan-ootree
            os: ubuntu-latest
            # Address Sanitizer (cmake -DCMAKE_BUILD_TYPE=Asan)
            build-type: Asan
            build-dir: .build
            cxx-flags: '-O2'
            skeleton: ${{ false }}

          - name: linux-gcc-debug-ootree
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            cxx-flags: -O2
            skeleton: ${{ false }}

          - name: linux-gcc-debug-intree
            os: ubuntu-latest
            build-type: Debug
            build-dir: .
            cxx-flags: -O2
            skeleton: ${{ false }}

          - name: linux-gcc-debug-ootree-skeleton
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            cxx-flags: -O2
            skeleton: ${{ true }}

          - name: linux-gcc-release-ootree
            os: ubuntu-latest
            build-type: Release
            build-dir: .build
            cxx-flags: ${{ null }}
            skeleton: ${{ false }}

          # macOS
          - name: macos-clang-debug-ootree
            os: macos-latest
            build-type: Debug
            build-dir: .build
            cxx-flags: -O2
            skeleton: ${{ false }}

          - name: macos-clang-debug-ootree-skeleton
            os: macos-latest
            build-type: Debug
            build-dir: .build
            cxx-flags: -O2
            skeleton: ${{ true }}

          - name: macos-clang-debug-intree
            os: macos-latest
            build-type: Debug
            build-dir: .
            cxx-flags: -O2
            skeleton: ${{ false }}

          - name: macos-clang-release-ootree
            os: macos-latest
            build-type: Release
            build-dir: .build
            cxx-flags: ${{ null }}
            skeleton: ${{ false }}

          # Windows
          - name: windows-msvc-debug-ootree
            os: windows-latest
            build-type: Debug
            build-dir: .build
            cxx-flags: ${{ null }}
            skeleton: ${{ false }}

          - name: windows-msvc-debug-intree
            os: windows-latest
            build-type: Debug
            build-dir: .
            cxx-flags: ${{ null }}
            skeleton: ${{ false }}

          - name: windows-msvc-release-ootree
            os: windows-latest
            build-type: Release
            build-dir: .build
            cxx-flags: ${{ null }}
            skeleton: ${{ false }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup chocolatey Cache (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-

      - name: Setup Common Prerequisites
        run: |
          case ${{ runner.os }} in
            Linux*)
              echo "CC=gcc" >> $GITHUB_ENV
              echo "CXX=g++" >> $GITHUB_ENV
              ;;
            macOS*)
              sudo xcode-select -switch /Applications/Xcode.app

              echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
              echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
              echo "SDKROOT=$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_ENV

              echo "$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_PATH
              ;;
            Windows*)
              choco install --no-progress -y winflexbison3
              ;;
          esac

      - name: Configure
        run: |
          INSTALL_PREFIX="$(pwd)/install"
          case ${{ runner.os }} in
            Windows*)
              cmake -S . \
                -B ${{ matrix.build-dir }} \
                -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -G "Visual Studio 16 2019" \
                -A x64
              ;;
            *)
              # Common CMake arguments
              args=( -S . -B ${{ matrix.build-dir }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} )
              args+=( -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" )

              # CFLAGS, CXXFLAGS
              [[ ! -z '${{ matrix.cxx-flags }}' ]] && \
                args+=( -DCMAKE_C_FLAGS="${{ matrix.cxx-flags }}" -DCMAKE_CXX_FLAGS="${{ matrix.cxx-flags }}" )

              # Debug
              echo "cmake ${args[@]}"

              # Run
              cmake "${args[@]}"
              ;;
          esac

      - name: Build
        run: cmake --build ${{ matrix.build-dir }} --config ${{ matrix.build-type }}

      - name: Standard Tests
        if: startsWith(runner.os, 'Windows') == false &&  matrix.skeleton == false
        run: cmake --build ${{ matrix.build-dir }} --target check

      - name: Skeleton Validation
        if: startsWith(runner.os, 'Windows') == false && matrix.skeleton == true
        working-directory: ${{ matrix.build-dir }}
        run: ./run_tests.sh --skeleton

      - name: Install
        run: |
          cmake --build ${{ matrix.build-dir }} --config ${{ matrix.build-type }} --target install
          echo -e "Install tree:\n$(find install | sed 's/^/-- /')"

      - name: Minimal Install Test
        working-directory: ./install/bin
        run: |
          ./re2c --version
          ./re2go --version
