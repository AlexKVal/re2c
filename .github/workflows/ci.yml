name: CI

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build-and-test:

    name: "${{ matrix.build-type }}: ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:

        include:
          # Linux
          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            common-flags: '-O2 -fsanitize=undefined'
            skeleton: ${{ false }}

          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            common-flags: '-O2 -fsanitize=address'
            skeleton: ${{ false }}

          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            common-flags: -O2
            skeleton: ${{ false }}

          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Debug
            build-dir: .
            common-flags: -O2
            skeleton: ${{ false }}

          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Debug
            build-dir: .build
            common-flags: -O2
            skeleton: ${{ true }}

          - toolchain: linux-gcc
            os: ubuntu-latest
            build-type: Release
            build-dir: .build
            common-flags: ${{ null }}
            skeleton: ${{ false }}

          # macOS
          - toolchain: macos-clang
            os: macos-latest
            build-type: Debug
            build-dir: .build
            common-flags: -O2
            skeleton: ${{ false }}

          - toolchain: macos-clang
            os: macos-latest
            build-type: Debug
            build-dir: .build
            common-flags: -O2
            skeleton: ${{ true }}

          - toolchain: macos-clang
            os: macos-latest
            build-type: Debug
            build-dir: .
            common-flags: -O2
            skeleton: ${{ false }}

          - toolchain: macos-clang
            os: macos-latest
            build-type: Release
            build-dir: .build
            common-flags: ${{ null }}
            skeleton: ${{ false }}

          # Windows
          - toolchain: windows-msvc
            os: windows-latest
            build-type: Debug
            build-dir: .build
            common-flags: ${{ null }}
            skeleton: ${{ false }}

          - toolchain: windows-msvc
            os: windows-latest
            build-type: Debug
            build-dir: .
            common-flags: ${{ null }}
            skeleton: ${{ false }}

          - toolchain: windows-msvc
            os: windows-latest
            build-type: Release
            build-dir: .build
            common-flags: ${{ null }}
            skeleton: ${{ false }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup chocolatey Cache (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-

      - name: Setup Common Prerequisites
        run: |
          case ${{ runner.os }} in
            Linux*)
              echo "CC=gcc" >> $GITHUB_ENV
              echo "CXX=g++" >> $GITHUB_ENV
              ;;
            macOS*)
              sudo xcode-select -switch /Applications/Xcode.app

              echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
              echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
              echo "SDKROOT=$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_ENV

              echo "$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_PATH
              ;;
            Windows*)
              choco install --no-progress -y winflexbison3
              ;;
          esac

      - name: Configure Using Flags '${{ matrix.common-flags}}'
        run: |
          case ${{ runner.os }} in
            Windows*)
              cmake -S . \
                -B ${{ matrix.build-dir }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -G "Visual Studio 16 2019" \
                -A x64
              ;;
            *)
              cmake -S . \
                -B ${{ matrix.build-dir }} \
                -DCMAKE_C_FLAGS="${{ matrix.common-flags }}" \
                -DCMAKE_CXX_FLAGS="${{ matrix.common-flags }}" \
                -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.common-flags }}" \
                -DCMAKE_SHARED_LINKER_FLAGS="${{ matrix.common-flags }}" \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
              ;;
          esac

      - name: Build
        run: cmake --build ${{ matrix.build-dir }} --config ${{ matrix.build-type }}

      - name: Minimal Load Test (Windows)
        if: startsWith(runner.os, 'Windows')
        working-directory: ${{ matrix.build-dir }}\${{ matrix.build-type }}
        run: ./re2c.exe --version

      - name: Standard Tests
        if: startsWith(runner.os, 'Windows') == false &&  matrix.skeleton == false
        run: cmake --build ${{ matrix.build-dir }} --target check

      - name: Skeleton Validation
        if: startsWith(runner.os, 'Windows') == false &&  matrix.skeleton == true
        working-directory: ${{ matrix.build-dir }}
        run: ./run_tests.sh --skeleton
