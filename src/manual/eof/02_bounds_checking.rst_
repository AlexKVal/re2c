Bounds checking with padding
----------------------------

Bounds checking is a generic method: it can be used with any input grammar.
The basic idea is simple: we need to check for the end of input before reading
the next input character. However, if implemented in a straightforward way, this
would be quite inefficient: checking on each input character would cause a major
slowdown. Re2c avoids slowdown by generating checks only in certain key states
of the lexer, and letting it run without checks in-between the key states.
More precisely, re2c computes strongly connected components (SCCs) of
the underlying DFA (which roughly correspond to loops), and generates only a few
checks per each SCC (usually just one, but in general enough to make the SCC
acyclic). The check is of the form ``(YYLIMIT - YYCURSOR) < n``, where ``n``
is the maximal length of a simple path in the corresponding SCC. If this
condiiton is true, the lexer calls ``YYFILL(n)``, which must either supply at
least ``n`` input characters, or do not return. When the lexer continues after
the check, it is certain that the next ``n`` characters can be read safely
without checks.

This approach reduces the number of checks significantly (and makes the lexer
much faster as a result), but it has a downside. Since the lexer checks for
multiple characters at once, it may end up in a situation when there are a few
remaining input characters (less than ``n``) corresponding to a short path in
the SCC, but the lexer cannot proceed because of the check, and ``YYFILL``
cannot supply more character because it is the end of input. To solve this
problem, re2c requires that additional padding consisting of fake characters is
appended at the end of input. The length of padding should be ``YYMAXFILL``,
which equals to the maximum ``n`` parameter to ``YYFILL`` and must be generated
by re2c using ``/*!max:re2c*/`` directive. The fake characters should not form a
valid lexeme suffix, otherwise the lexer may be fooled into matching a fake
lexeme. Usually it's a good idea to use ``NULL`` characters for padding.

Below is an example of using bounds checking with padding. Note that the grammar
rule for single-quoted strings allows arbitrary symbols in the middle of lexeme,
so there is no natural sentinel in the grammar. Strings like ``"aha\0ha"`` are
perfectly valid, but ill-formed strings like ``"aha\0`` are also possible and
shouldnâ€™t crash the lexer. In this example we do not use buffer refilling,
therefore ``YYFILL`` definition simply returns an error. Note that ``YYFILL``
will only be called after the lexer reaches padding, because only then will the
check condition be satisfied.
