``-? -h --help``
    Show help message.

``-1 --single-pass``
    Deprecated. Does nothing (single pass is the default now).

``-8 --utf-8``
    Generate a lexer that reads input in UTF-8 encoding.
    re2c assumes that character range is 0 -- 0x10FFFF and character size is
    1 byte.

``-b --bit-vectors``
    Optimize conditional jumps using bit masks. Implies ``-s``.

``-c --conditions --start-conditions``
    Enable support of Flex-like "conditions": multiple interrelated lexers
    within one block. Option ``--start-conditions`` is a legacy alias; use
    ``--conditions`` instead.

``--case-insensitive``
    Treat single-quoted and double-quoted strings as case-insensitive.

``--case-inverted``
    Invert the meaning of single-quoted and double-quoted strings:
    treat single-quoted strings as case-sensitive and double-quoted strings
    as case-insensitive.

``-D --emit-dot``
    Instead of normal output generate lexer graph in .dot format.
    The output can be converted to an image with the help of Graphviz
    (e.g. something like ``dot -Tpng -odfa.png dfa.dot``).

``-d --debug-output``
    Emit ``YYDEBUG`` in the generated code.
    ``YYDEBUG`` should be defined by the user in the form of a void function
    with two parameters: ``state`` (lexer state or -1) and ``symbol`` (current
    input symbol of type ``YYCTYPE``).

``--dfa-minimization <moore | table>``
    The internal algorithm used by re2c to minimize the DFA: ``moore`` (the
    default) is Moore algorithm, and ``table`` is the "table filling" algorithm.
    Both algorithms should produce the same DFA up to states relabeling; table
    filling is simpler and much slower and serves as a reference implementation.

``--dump-adfa``
    Debug option: output DFA after tunneling (in .dot format).

``--dump-cfg``
    Debug option: output control flow graph of tag variables (in .dot format).

``--dump-closure-stats``
    Debug option: output statistics on the number of states in closure.

``--dump-dfa-det``
    Debug option: output DFA immediately after determinization (in .dot format).

``--dump-dfa-min``
    Debug option: output DFA after minimization (in .dot format).

``--dump-dfa-tagopt``
    Debug option: output DFA after tag optimizations (in .dot format).

``--dump-dfa-raw``
    Debug option: output DFA under construction with expanded state-sets
    (in .dot format).

``--dump-interf``
    Debug option: output interference table produced by liveness analysis of tag
    variables.

``--dump-nfa``
    Debug option: output NFA (in .dot format).

``-e --ecb``
    Generate a lexer that reads input in EBCDIC encoding.
    re2c assumes that character range is 0 -- 0xFF an character size is 1 byte.

``--eager-skip``
    Make the generated lexer advance the input position "eagerly":
    immediately after reading input symbol.
    By default this happens after transition to the next state.
    Implied by ``--no-lookahead``.

``--empty-class <match-empty | match-none | error>``
    Define the way re2c treats empty character classes. With ``match-empty``
    (the default) empty class matches empty input (which is illogical, but
    backwards-compatible). With``match-none`` empty class always fails to match.
    With ``error`` empty class raises a compilation error.

``--encoding-policy <fail | substitute | ignore>``
    Define the way re2c treats Unicode surrogates.
    With ``fail`` re2c aborts with an error when a surrogate is encountered.
    With ``substitute`` re2c silently replaces surrogates with the error code
    point 0xFFFD. With ``ignore`` (the default) re2c treats surrogates as
    normal code points. The Unicode standard says that standalone surrogates
    are invalid, but real-world libraries and programs behave in different ways.

``-f --storable-state``
    Generate a lexer which can store its inner state.
    This is useful in push-model lexers which are stopped by an outer program
    when there is not enough input, and then resumed when more input becomes
    available. In this mode users should additionally define ``YYGETSTATE()``
    and ``YYSETSTATE(state)`` macros and variables ``yych``, ``yyaccept``
    and ``state`` as part of the lexer state.

``-F --flex-syntax``
    Partial support for Flex syntax: in this mode named definitions don't need
    the equal sign and the terminating semicolon, and when used they must be
    surrounded by curly braces. Names without curly braces are treated as
    double-quoted strings.

``-g --computed-gotos``
    Optimize conditional jumps using non-standard "computed goto" extension
    (which must be supported by the C/C++ compiler). re2c generates jump tables
    only in complex cases with a lot of conditional branches. Complexity
    threshold can be configured with ``cgoto:threshold`` configuration. This
    option implies ``-b``.

``-I PATH``
    Add ``PATH`` to the list of locations which are used when searching for
    include files. This option is useful in combination with
    ``/*!include:re2c ... */`` directive. Re2c looks for ``FILE`` in the
    directory of including file and in the list of include paths specified by
    ``-I`` option.

``-i --no-debug-info``
    Do not output ``#line`` information. This is useful when the generated code
    is tracked by some version control system or IDE.

``--input <default | custom>``
    Specify re2c input API.
    Option ``default`` is the default API composed of pointer-like primitives
    ``YYCURSOR``, ``YYMARKER``, ``YYLIMIT`` etc.
    Option ``custom`` is the generic API composed of function-like primitives
    ``YYPEEK()``, ``YYSKIP()``, ``YYBACKUP()``, ``YYRESTORE()`` etc.

``--input-encoding <ascii | utf8>``
    Specify the way re2c parses regular expressions.
    With ``ascii`` (the default) re2c handles input as ASCII-encoded: any
    sequence of code units is a sequence of standalone 1-byte characters.
    With ``utf8`` re2c handles input as UTF8-encoded and recognizes multibyte
    characters.

``--location-format <gnu | msvc>``
    Specify location format in messages.
    With ``gnu`` locations are printed as 'filename:line:column: ...'.
    With ``msvc`` locations are printed as 'filename(line,column) ...'.
    Default is ``gnu``.

``--no-generation-date``
    Suppress date output in the generated file.

``--no-lookahead``
    Use TDFA(0) instead of TDFA(1).
    This option has effect only with ``--tags`` or ``--posix-captures`` options.

``--no-optimize-tags``
    Suppress optimization of tag variables (useful for debugging).

``--no-version``
    Suppress version output in the generated file.

``-o OUTPUT --output=OUTPUT``
    Specify the ``OUTPUT`` file.

``-P --posix-captures``
    Enable submatch extraction with POSIX-style capturing groups.

``--posix-closure <gor1 | gtop>``
    Specify shortest-path algorithm used for construction of epsilon-closure
    with POSIX disambiguation semantics: ``gor1`` (the default) stands for
    Goldberg-Radzik algorithm, and ``gtop`` stands for "global topological
    order" algorithm.

``--posix-prectable <complex | naive>``
    Specify the algorithm used to compute POSIX precedence table. The
    ``complex`` algorithm computes precedence table in one traversal of tag
    history tree and has quadratic complexity in the number of TNFA states; it
    is the default. The ``naive`` algorithm has worst-case cubic complexity in
    the number of TNFA states, but it is much simpler than ``complex`` and may
    be slightly faster in non-pathological cases.

``-r --reusable``
    Allows reuse of re2c rules with ``/*!rules:re2c */`` and ``/*!use:re2c */``
    blocks. Exactly one rules-block must be present. The rules are saved and
    used by every use-block that follows, which may add its own rules and
    configurations.

``-S --skeleton``
    Ignore user-defined interface code and generate a self-contained "skeleton"
    program. Additionally, generate input files with strings derived from the
    regular grammar and compressed match results that are used to verify
    "skeleton" behavior on all inputs. This option is useful for finding bugs
    in optimizations and code generation.

``-s --nested-ifs``
    Use nested ``if`` statements instead of ``switch`` statements in conditional
    jumps. This usually results in more efficient code with non-optimizing C/C++
    compilers.

``--stadfa``
    Use staDFA algorithm for submatch extraction. The main difference with TDFA
    is that tag operations in staDFA are placed in states, not on transitions.

``-T --tags``
    Enable submatch extraction with tags.

``-t HEADER --type-header=HEADER``
    Generate a ``HEADER`` file that contains enum with condition names.
    Requires ``-c`` option.

``-u --unicode``
    Generate a lexer that reads UTF32-encoded input. Re2c assumes that character
    range is 0 -- 0x10FFFF and character size is 4 bytes. This option implies
    ``-s``.

``-V --vernum``
    Show version information in ``MMmmpp`` format (major, minor, patch).

``--verbose``
    Output a short message in case of success.

``-v --version``
    Show version information.

``-w --wide-chars``
    Generate a lexer that reads UCS2-encoded input. Re2c assumes that character
    range is 0 -- 0xFFFF and character size is 2 bytes. This option implies
    ``-s``.

``-x --utf-16``
    Generate a lexer that reads UTF16-encoded input. Re2c assumes that character
    range is 0 -- 0x10FFFF and character size is 2 bytes. This option implies
    ``-s``.
